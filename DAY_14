KOKO Eating bananas:-
LC:875
------------------------
class Solution {
    private int findMaxElement(int[] piles){
        int n=piles.length;
        int maxValue=piles[0];
        for(int i = 0; i < n; i++){
            maxValue=Math.max(piles[i],maxValue);
        }
        return maxValue;
    }
    private int calculateTotalHours(int[] piles, int hour){
        int n = piles.length;
        int totalHours=0;
        for(int i=0;i<n;i++){
            totalHours += Math.ceil((double)piles[i]/(double)hour);
        }
        return totalHours;
    }
    public int minEatingSpeed(int[] piles, int h) {
        int low = 1;
        int high = findMaxElement(piles);
        while(low <= high){
            int mid=low+(high-low)/2;
            int totalHours=calculateTotalHours(piles,mid);
            if(totalHours<=h)
              high=mid-1;
            else
              low=mid+1;
        } 
        return low;
    }
}
--------------------------------------------------------------------------------------
2.Minimum Number of Days to Make m Bouquets
LC:1482
-------------------------------------

class Solution {
    private int minValue(int[] arr){
        int minValue = arr[0];
        for(int i=0;i<arr.length;i++){
            minValue = Math.min(arr[i], minValue);
        }
        return minValue;
    }
    private int maxValue(int[] arr){
        int maxValue = arr[0];
        for(int i = 0;i < arr.length; i++){
            maxValue = Math.max(arr[i], maxValue);
        }
        return maxValue;
    }
    private boolean possible(int[] arr, int day, int m, int k){
        int nOfBloom = 0;
        int count=0;
        for(int i=0;i<arr.length;i++){
            if(arr[i]<=day){
                count++;
            }
            else{
                nOfBloom += count/k;
                count = 0;
            }
        }
        nOfBloom +=count/k;
        if(nOfBloom >= m){
            return true;
        }
        else
        return false;
    }

    public int minDays(int[] bloomDay, int m, int k) {
        int low=minValue(bloomDay);
        int high = maxValue(bloomDay);
        int ans = -1;
        int n = bloomDay.length;
        if(n < m*k) return -1;
        while(low<=high){
          int mid = low + (high - low) / 2;
          if(possible(bloomDay, mid, m, k)==true){
            ans = mid;
            high = mid - 1;
          }
          else{
            low = mid + 1;
          }
        }
        return ans;

    }
}
-----------------------------------------------------------------------------------
