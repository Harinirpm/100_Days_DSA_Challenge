gfg:-
-------------
class Solution {
     public static int countDistinctSubsequences(String s) {
    int n = s.length();
        int[] dp = new int[n + 1];
        dp[0] = 1;  
        int[] last = new int[26];
        Arrays.fill(last, -1); 
        for (int i = 1; i <= n; i++) {
            dp[i] = 2 * dp[i - 1];

            char currentChar = s.charAt(i - 1);
            int charIndex = currentChar - 'a';  
            if (last[charIndex] != -1) {
                dp[i] -= dp[last[charIndex]];
            }
            last[charIndex] = i - 1;
        }
        return dp[n];
    }

    // private static Set<String> generateSubSequenceHelper(String s, String current,
    //                              Set<String> subseq, int index){
    //         if(index >= s.length()){
    //             subseq.add(current);
    //             return subseq;
    //         }
    //         generateSubSequenceHelper(s, current, subseq, index+1);
    //         generateSubSequenceHelper(s, current+ s.charAt(index), subseq, index+1);
    //         return subseq;
    //      }
    // private static Set<String> generateSubSeq(String s){
    //     Set<String> Subseq = new HashSet<>();
    //     generateSubSequenceHelper(s," ", Subseq, 0);
    //     return Subseq;
    // }
    public static String betterString(String str1, String str2) {
        
        // if (str1.length() >= str2.length()) {
        //     return str1;
        // } else {
        //     return str2;
        // }
        
        int count1 = countDistinctSubsequences(str1);
        int count2 = countDistinctSubsequences(str2);
        if (count1 >= count2) {
            return str1;
        } else {
            return str2;
        }
    }
}
