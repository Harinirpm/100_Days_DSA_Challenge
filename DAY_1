Left rotate an array by D places:-
------------------------------------
Brute:  T.C:- O(d)+O(n-d)+O(d)=O(n+d)
        S.C:- O(d)
--------
import java.util.*;
public class Main
{
    public static void leftRotateArrayByDPlaces(int[] arr ,int size, int range){
        int[] temp=new int[range];
        for(int i=0;i<range;i++){
            temp[i]=arr[i];
        }
        for(int i=range;i<size;i++){
            arr[i-range]=arr[i];
        }
        for(int i=size-range;i<size;i++){
            arr[i]=temp[i-(size-range)];
        }
        for(int i=0;i<size;i++){
            System.out.print(arr[i]+" ");
        }
        
    } 
	public static void main(String[] args) {
	Scanner in=new Scanner(System.in);
	int n=in.nextInt();
	int[] arr=new int[n];
	for(int i=0;i<n;i++){
	    arr[i]=in.nextInt();
	}
	int k=in.nextInt();
  k=k%n;
    leftRotateArrayByDPlaces(arr,n,k);
	}
}
-------------------------------------------------------------------------------------

Optimal:-
T.C:- O(d)+O(n-d)+O(n)=O(2n)
S.C:- O(1)
---------
import java.util.*;
public class Main
{
    public static void reverse(int[] arr ,int left, int right){
        while(left<right){
            int temp=arr[left];
            arr[left]=arr[right];
            arr[right]=temp;
            left++;
            right--;
        }
    } 
	public static void main(String[] args) {
	Scanner in=new Scanner(System.in);
	int n=in.nextInt();
	int[] arr=new int[n];
	for(int i=0;i<n;i++){
	    arr[i]=in.nextInt();
	}
	int k=in.nextInt();
	k=k%n;
    reverse(arr,0,k-1);
    reverse(arr,k,n-1);
    reverse(arr,0,n-1);
    for(int i=0;i<n;i++){
        System.out.print(arr[i]+" ");
    }
	}
}



