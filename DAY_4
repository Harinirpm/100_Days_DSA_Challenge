Max Consecutive one's:- LC-485
---------------------
T.C:O(N);
S.C:O(1)
------------------------------------------------------------------------
class Solution {
    public int findMaxConsecutiveOnes(int[] nums) {
        int n=nums.length;
        int count=0;
        int maxLen=0;
        for(int i=0;i<n;i++){
            if(nums[i]==1){
                count++;
                maxLen=Math.max(maxLen,count);
            }
            else if(nums[i]==0){
                count=0;
            }
        }
        return maxLen;
    }
}
-------------------------------------------------------------------------
2.Single Number LC:136
------------------------
class Solution {
    public int singleNumber(int[] nums) {
     int ans=0;
     for(int i=0;i<nums.length;i++){
        ans=ans^nums[i];
     }   
     return ans;
    }
}
-------------------------------------------------------------------------
3. Frequencies of Limited Range Array Elements:-
T.C:O(N)
S.C:O(1)
-------------------------------------------------------------------------
class Solution {
    // Function to count the frequency of all elements from 1 to N in the array.
    public static void frequencyCount(int arr[], int N, int P) {
        
        for(int i=0;i<N;){
            if(arr[i]>0 && arr[i]<=N){
                int j=arr[i]-1;
                if(arr[j]<=0){
                    arr[i]=0;
                    arr[j]--;
                    i++;
                }else{
                    swap(arr, i,j);
                    arr[j]=-1;
                }
            }
            else if(arr[i]>N){
                arr[i]=0;
                i++;
            }
            else
            i++;
        }
        for(int i=0;i<N;i++){
            arr[i]=-arr[i];
        }
        
    }
    public static void swap(int[] arr,int i,int j){
        int temp=arr[i];
        arr[i]=arr[j];
        arr[j]=temp;
    }
}
-----------------------------------------------------------------------------

















