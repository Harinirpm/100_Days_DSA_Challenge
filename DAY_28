Permutation 2:
--------------
class Solution {
    private void recurPermutation(int index, int[] nums, List<List<Integer>> ans){
        if(index == nums.length){
            List<Integer> ds = new ArrayList<>();
            for(int i=0;i<nums.length;i++){
                ds.add(nums[i]);
            }
            ans.add(new ArrayList<>(ds));
            return;
        }
        Set<Integer> swapped = new HashSet<>();
        for(int i=index; i<nums.length; i++){
             if (swapped.contains(nums[i])) {
                continue;
            }
            swapped.add(nums[i]);
           swap(i,index,nums);
           recurPermutation(index+1, nums, ans);
           swap(i,index,nums);
        }
    }
    private void swap(int i, int j, int[] nums){
           int temp = nums[i];
           nums[i] = nums[j];
           nums[j] = temp;
    }
    public List<List<Integer>> permuteUnique(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
         Arrays.sort(nums); 
        recurPermutation(0,nums, ans);
        return ans;
    }
}
